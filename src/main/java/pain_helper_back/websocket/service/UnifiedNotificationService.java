package pain_helper_back.websocket.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import pain_helper_back.websocket.dto.UnifiedNotificationDTO;

/*
 * –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –°–ï–†–í–ò–° –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket.
 * 
 * –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ä–æ–ª–∏
 * - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * - Broadcast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 * 
 * –¢–û–ü–ò–ö–ò:
 * 1. /topic/notifications/all - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è dashboard)
 * 2. /topic/notifications/doctors - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Ä–∞—á–µ–π
 * 3. /topic/notifications/anesthesiologists - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥–æ–≤
 * 4. /topic/notifications/nurses - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä
 * 5. /topic/notifications/critical - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * 6. /topic/notifications/emr-alerts - EMR –∞–ª–µ—Ä—Ç—ã
 * 7. /topic/notifications/pain-escalations - —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –±–æ–ª–∏
 * 8. /queue/notifications/{userId} - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * 
 * –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
 * // –û—Ç–ø—Ä–∞–≤–∏—Ç—å EMR –∞–ª–µ—Ä—Ç –≤—Å–µ–º –≤—Ä–∞—á–∞–º
 * UnifiedNotificationDTO notification = UnifiedNotificationDTO.builder()
 *     .type(NotificationType.EMR_ALERT)
 *     .priority(NotificationPriority.CRITICAL)
 *     .patientMrn("EMR-12345")
 *     .title("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ GFR")
 *     .message("GFR —É–ø–∞–ª —Å 45 –¥–æ 25")
 *     .targetRole("DOCTOR")
 *     .build();
 * 
 * unifiedNotificationService.sendNotification(notification);
 * 
 * –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ PainEscalationNotificationService
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ WebSocketNotificationService (EMR)
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class UnifiedNotificationService {

    private final SimpMessagingTemplate messagingTemplate;

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–ø–∏–∫–∏.
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ø–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞, —Ä–æ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
     * 
     * @param notification –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public void sendNotification(UnifiedNotificationDTO notification) {
        try {
            // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—â–∏–π —Ç–æ–ø–∏–∫ (–¥–ª—è dashboard)
            messagingTemplate.convertAndSend("/topic/escalations/dashboard", notification);
            log.debug("Sent notification to /topic/escalations/dashboard: {}", notification.getTitle());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–æ–ø–∏–∫ –ø–æ —Ä–æ–ª–∏
            if (notification.getTargetRole() != null) {
                String roleTopic = getRoleTopicPath(notification.getTargetRole());
                messagingTemplate.convertAndSend(roleTopic, notification);
                log.info("üì® Sent notification to {}: {}", roleTopic, notification.getTitle());
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–æ–ø–∏–∫ –ø–æ —Ç–∏–ø—É
            String typeTopic = getTypeTopicPath(notification.getType());
            if (typeTopic != null) {
                messagingTemplate.convertAndSend(typeTopic, notification);
                log.info("üì® Sent notification to {}: {}", typeTopic, notification.getTitle());
            }

            // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫
            if (notification.getPriority() == UnifiedNotificationDTO.NotificationPriority.CRITICAL) {
                messagingTemplate.convertAndSend("/topic/escalations/critical", notification);
                log.warn("üö® CRITICAL notification sent: {} - {}", notification.getTitle(), notification.getMessage());
            }

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ
            if (notification.getTargetUserId() != null) {
                sendPersonalNotification(notification, notification.getTargetUserId());
            }

            log.info("Notification sent successfully: type={}, priority={}, patient={}", 
                    notification.getType(), notification.getPriority(), notification.getPatientMrn());

        } catch (Exception e) {
            log.error("Failed to send notification: {}", e.getMessage(), e);
        }
    }

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * 
     * @param notification –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void sendPersonalNotification(UnifiedNotificationDTO notification, String userId) {
        try {
            String destination = String.format("/queue/notifications/%s", userId);
            messagingTemplate.convertAndSend(destination, notification);
            log.info("Personal notification sent to user {}: {}", userId, notification.getTitle());
        } catch (Exception e) {
            log.error("Failed to send personal notification to user {}: {}", userId, e.getMessage(), e);
        }
    }

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏.
     * 
     * @param notification –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param role –†–æ–ª—å (DOCTOR, ANESTHESIOLOGIST, NURSE)
     */
    public void sendToRole(UnifiedNotificationDTO notification, String role) {
        try {
            String roleTopic = getRoleTopicPath(role);
            messagingTemplate.convertAndSend(roleTopic, notification);
            log.info("Notification sent to role {}: {}", role, notification.getTitle());
        } catch (Exception e) {
            log.error("Failed to send notification to role {}: {}", role, e.getMessage(), e);
        }
    }

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å broadcast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.
     * 
     * @param notification –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public void broadcastNotification(UnifiedNotificationDTO notification) {
        try {
            messagingTemplate.convertAndSend("/topic/escalations/dashboard", notification);
            log.info("üì¢ Broadcast notification sent: {}", notification.getTitle());
        } catch (Exception e) {
            log.error("Failed to broadcast notification: {}", e.getMessage(), e);
        }
    }

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–ø–∏–∫–∏).
     * 
     * @param notification –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public void sendCriticalNotification(UnifiedNotificationDTO notification) {
        notification.setPriority(UnifiedNotificationDTO.NotificationPriority.CRITICAL);
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–ø–∏–∫–∏
            messagingTemplate.convertAndSend("/topic/escalations/critical", notification);
            messagingTemplate.convertAndSend("/topic/escalations/dashboard", notification);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Ç—É–¥–∞
            if (notification.getTargetRole() != null) {
                String roleTopic = getRoleTopicPath(notification.getTargetRole());
                messagingTemplate.convertAndSend(roleTopic, notification);
            }

            log.warn("üö® CRITICAL notification sent to all channels: {}", notification.getTitle());
        } catch (Exception e) {
            log.error("Failed to send critical notification: {}", e.getMessage(), e);
        }
    }

    /*
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å —Ç–æ–ø–∏–∫–∞ –ø–æ —Ä–æ–ª–∏
     * 
     * –í–ê–ñ–ù–û: –¢–æ–ø–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!
     * Frontend –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: /topic/escalations/anesthesiologists
     */
    private String getRoleTopicPath(String role) {
        return switch (role.toUpperCase()) {
            case "DOCTOR" -> "/topic/escalations/doctors";
            case "ANESTHESIOLOGIST" -> "/topic/escalations/anesthesiologists";
            case "NURSE" -> "/topic/escalations/nurses";
            case "ADMIN" -> "/topic/escalations/admins";
            default -> "/topic/escalations/all";
        };
    }

    /*
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å —Ç–æ–ø–∏–∫–∞ –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * 
     * –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º /topic/escalations/* –≤–º–µ—Å—Ç–æ /topic/notifications/*
     */
    private String getTypeTopicPath(UnifiedNotificationDTO.NotificationType type) {
        return switch (type) {
            case EMR_ALERT -> "/topic/emr-alerts";
            case PAIN_ESCALATION -> "/topic/escalations/anesthesiologists"; // –≠—Å–∫–∞–ª–∞—Ü–∏–∏ –±–æ–ª–∏ –∏–¥—É—Ç –∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥–∞–º
            case RECOMMENDATION_UPDATE -> "/topic/escalations/doctors";
            case DOSE_REMINDER -> "/topic/escalations/nurses";
            case PROTOCOL_APPROVAL -> "/topic/escalations/doctors";
            case CRITICAL_VAS -> "/topic/escalations/critical";
            default -> null;
        };
    }

    /*
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
     */
    public void sendTestNotification() {
        UnifiedNotificationDTO testNotification = UnifiedNotificationDTO.builder()
                .type(UnifiedNotificationDTO.NotificationType.SYSTEM_MESSAGE)
                .priority(UnifiedNotificationDTO.NotificationPriority.LOW)
                .title("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                .message("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                .timestamp(java.time.LocalDateTime.now())
                .build();

        broadcastNotification(testNotification);
        log.info("Test notification sent");
    }
}
